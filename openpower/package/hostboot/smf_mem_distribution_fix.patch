From dd5b1bcb62c37de1ca7e859dbfc27780e9adaaa7 Mon Sep 17 00:00:00 2001
From: Ilya Smirnov <ismirno@us.ibm.com>
Date: Tue, 21 Jan 2020 14:04:52 -0600
Subject: [PATCH] SMF: Distribute 0 Mem By Default

When the amount of SMF memory to be distributed is not specified
in skiboot/NVRAM, we don't turn SMF off, since the leg to distribute
0 memory is not executed. That causes issues in istep 15 where we
expect SMF BAR to be nonzero, and we assert since SMF mode is still
on.

This commit factors out the call to distribute SMF mem into general
flow and makes the default amount to distribute 0, which will force
SMF to be turned off.

Change-Id: I48c8d21bee67c4aafd0c21cabc449037def841b4
---
 src/include/usr/secureboot/smf.H                   | 13 +++++-
 src/usr/isteps/istep07/call_mss_attr_update.C      |  8 ++--
 src/usr/isteps/istep07/call_mss_eff_config.C       | 51 ++++++++++++++--------
 src/usr/isteps/istep15/host_build_stop_image.C     |  4 +-
 src/usr/secureboot/smf/smf.C                       | 16 ++++++-
 .../targeting/common/xmltohb/attribute_types.xml   | 15 +++++++
 .../common/xmltohb/simics_CUMULUS.system.xml       | 16 +++----
 .../common/xmltohb/simics_NIMBUS.system.xml        |  7 ++-
 src/usr/targeting/common/xmltohb/target_types.xml  |  3 ++
 9 files changed, 97 insertions(+), 36 deletions(-)

diff --git a/src/include/usr/secureboot/smf.H b/src/include/usr/secureboot/smf.H
index 90f5b76..df846fc 100644
--- a/src/include/usr/secureboot/smf.H
+++ b/src/include/usr/secureboot/smf.H
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2018                             */
+/* Contributors Listed Below - COPYRIGHT 2018,2020                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -87,6 +87,17 @@ errlHndl_t distributeSmfMem(const uint64_t i_requestedSmfMemAmtInBytes,
                             std::vector<struct ProcToMemAssoc>& i_procToMemVec);
 
 /**
+ * @brief Function to distribute the amount of SMF memory as driven by the
+ *        ATTR_SMF_MEM_AMT_REQUESTED attribute. This function makes a call
+ *        to distributeSmfMem(uint64_t) with the value of the read attribute.
+ *
+ * @return nullptr: distribution was successful
+ *         non-nullptr: an error occurred during distribution (the error type
+ *         will never be unrecoverable)
+ */
+errlHndl_t distributeSmfMem();
+
+/**
  * @brief Helper function to return the total amount of memory available behind
  *        the given proc
  *
diff --git a/src/usr/isteps/istep07/call_mss_attr_update.C b/src/usr/isteps/istep07/call_mss_attr_update.C
index a9e10d0..27ff356 100644
--- a/src/usr/isteps/istep07/call_mss_attr_update.C
+++ b/src/usr/isteps/istep07/call_mss_attr_update.C
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2015,2019                        */
+/* Contributors Listed Below - COPYRIGHT 2015,2020                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -320,19 +320,19 @@ errlHndl_t check_proc0_memory_config(IStepError & io_istepErr)
     INITSERVICE::SPLESS::MboxScratch6_t l_scratch6 {
         l_scratchRegs[INITSERVICE::SPLESS::SCRATCH_6]};
 
-    // If the smfConfig bit in scratch reg6 does not match the SMF_ENABLED
+    // If the smfConfig bit in scratch reg6 does not match the SMF_CONFIG
     // setting on the system, then the SBE is in disagreement with the system on
     // whether SMF mode should be enabled. We need to force SBE update here so
     // that the XSCOM BAR on the slave proc is set correctly before
     // we try to perform XSCOM operations in istep10.
-    if(l_scratch6.smfConfig != SECUREBOOT::SMF::isSmfEnabled())
+    if(l_scratch6.smfConfig != l_sys->getAttr<ATTR_SMF_CONFIG>())
     {
         TRACFCOMP(ISTEPS_TRACE::g_trac_isteps_trace,
                   "SBE and SYS disagree on the SMF setting; SBE thinks it "
                   "should be %s, but it should actually be %s;"
                   "requesting SBE update.",
                   l_scratch6.smfConfig ? "enabled" : "disabled",
-                  SECUREBOOT::SMF::isSmfEnabled() ? "enabled" : "disabled");
+                  l_sys->getAttr<ATTR_SMF_CONFIG>() ? "enabled" : "disabled");
         l_updateNeeded = true;
     }
 
diff --git a/src/usr/isteps/istep07/call_mss_eff_config.C b/src/usr/isteps/istep07/call_mss_eff_config.C
index e5ac218..50d0081 100644
--- a/src/usr/isteps/istep07/call_mss_eff_config.C
+++ b/src/usr/isteps/istep07/call_mss_eff_config.C
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2015,2019                        */
+/* Contributors Listed Below - COPYRIGHT 2015,2020                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -55,6 +55,7 @@
 // Targeting Support
 #include    <targeting/common/commontargeting.H>
 #include    <targeting/common/utilFilter.H>
+#include    <targeting/common/util.H>
 
 // Fapi Support
 #include    <fapi2.H>
@@ -78,6 +79,7 @@
 
 // SMF Support
 #include    <secureboot/smf.H>
+#include    <secureboot/smf_utils.H>
 
 // NVDIMM Support
 #include    <nvram/nvram_interface.H>
@@ -535,40 +537,55 @@ void*    call_mss_eff_config( void *io_pArgs )
     }
 
 #ifndef CONFIG_FSP_BUILD
-    if(!l_StepError.isNull())
-    {
-        break;
-    }
-
     const char* l_smfMemAmtStr = nullptr;
+    uint64_t l_smfMemAmt = 0;
+
     l_err = NVRAM::nvramRead(NVRAM::SMF_MEM_AMT_KEY, l_smfMemAmtStr);
     if(l_err)
     {
-        TRACFCOMP(ISTEPS_TRACE::g_trac_isteps_trace, INFO_MRK"NVRAM read failed. Will not attempt to distribute any SMF memory.");
+        TRACFCOMP(ISTEPS_TRACE::g_trac_isteps_trace, INFO_MRK"NVRAM read failed. Will distribute 0 SMF memory.");
         // Do not propagate the error - we don't care if NVRAM read fails
         delete l_err;
         l_err = nullptr;
-        break;
     }
 
     // l_smfMemAmtStr will be nullptr if the SMF_MEM_AMT_KEY doesn't exist
     if(l_smfMemAmtStr)
     {
-        uint64_t l_smfMemAmt = strtoul(l_smfMemAmtStr, nullptr, 16);
+        l_smfMemAmt = strtoul(l_smfMemAmtStr, nullptr, 16);
         TRACFCOMP(ISTEPS_TRACE::g_trac_isteps_trace, INFO_MRK"Distributing 0x%.16llx SMF memory among the procs on the system", l_smfMemAmt);
-        l_err = SECUREBOOT::SMF::distributeSmfMem(l_smfMemAmt);
-        if(l_err)
-        {
-            // Do not propagate or break on error - distributeSmfMem will
-            // not return unrecoverable errors.
-            errlCommit(l_err, ISTEP_COMP_ID);
-        }
+
+        TARGETING::Target* l_sys = nullptr;
+        TARGETING::targetService().getTopLevelTarget(l_sys);
+        assert(l_sys, "call_mss_eff_config: top level target is nullptr!");
+        l_sys->setAttr<TARGETING::ATTR_SMF_MEM_AMT_REQUESTED>(l_smfMemAmt);
     }
     else
     {
-        TRACFCOMP(ISTEPS_TRACE::g_trac_isteps_trace, INFO_MRK"SMF_MEM_AMT_KEY was not found in NVRAM; no SMF memory was distributed.");
+        TRACFCOMP(ISTEPS_TRACE::g_trac_isteps_trace, INFO_MRK"SMF_MEM_AMT_KEY was not found in NVRAM; 0 SMF memory will be distributed.");
     }
 
+    l_err = SECUREBOOT::SMF::distributeSmfMem();
+    if(l_err)
+    {
+        // Do not propagate or break on error - distributeSmfMem will
+        // not return unrecoverable errors.
+        errlCommit(l_err, ISTEP_COMP_ID);
+    }
+
+
+    if(SECUREBOOT::SMF::isSmfEnabled())
+    {
+        // SMF is still enabled, which means that the requested amount of
+        // SMF memory may have changed. Rerun the mss_eff_grouping HWP
+        // to update the SMF BAR/SMF memory amounts.
+        l_err = call_mss_eff_grouping(l_StepError);
+        if(l_err)
+        {
+            l_StepError.addErrorDetails( l_err );
+            errlCommit( l_err, ISTEP_COMP_ID);
+        }
+    }
 #endif
 
     } while (0);
diff --git a/src/usr/isteps/istep15/host_build_stop_image.C b/src/usr/isteps/istep15/host_build_stop_image.C
index 6bc7553..0e20500 100644
--- a/src/usr/isteps/istep15/host_build_stop_image.C
+++ b/src/usr/isteps/istep15/host_build_stop_image.C
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2016,2019                        */
+/* Contributors Listed Below - COPYRIGHT 2016,2020                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -452,7 +452,7 @@ void* host_build_stop_image (void *io_pArgs)
             //memory @HRMOR (instead of secure SMF memory).  When HB goes
             //through istep 16 it will enter UV mode if SMF is enabled, and then
             //when PM complex is restarted in istep 21, HOMER is moved to right
-            //spot. No movement of HOME oocurs in non-SMF mode; HOMER lands in
+            //spot. No movement of HOMER occurs in non-SMF mode; HOMER lands in
             //non-secure memory.
 
             l_memBase = get_top_mem_addr();
diff --git a/src/usr/secureboot/smf/smf.C b/src/usr/secureboot/smf/smf.C
index d940660..53c4834 100644
--- a/src/usr/secureboot/smf/smf.C
+++ b/src/usr/secureboot/smf/smf.C
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2018                             */
+/* Contributors Listed Below - COPYRIGHT 2018,2020                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -352,5 +352,19 @@ errlHndl_t distributeSmfMem(const uint64_t i_requestedSmfMemAmtInBytes)
     return l_errl;
 }
 
+errlHndl_t distributeSmfMem()
+{
+    errlHndl_t l_errl = nullptr;
+
+    TARGETING::Target* l_sys = nullptr;
+    TARGETING::targetService().getTopLevelTarget(l_sys);
+    assert(l_sys, "distributeSmfMem: top level target is nullptr!");
+
+    auto l_smfMemAmt = l_sys->getAttr<TARGETING::ATTR_SMF_MEM_AMT_REQUESTED>();
+    l_errl = distributeSmfMem(l_smfMemAmt);
+
+    return l_errl;
+}
+
 } // namespace SMF
 } // namespace SECUREBOOT
diff --git a/src/usr/targeting/common/xmltohb/attribute_types.xml b/src/usr/targeting/common/xmltohb/attribute_types.xml
index 9214170..7d2bf2c 100644
--- a/src/usr/targeting/common/xmltohb/attribute_types.xml
+++ b/src/usr/targeting/common/xmltohb/attribute_types.xml
@@ -7502,6 +7502,21 @@
   </attribute>
 
   <attribute>
+    <description>The amount of SMF memory requested
+                 by the user, in bytes (read from NVRAM).
+    </description>
+    <id>SMF_MEM_AMT_REQUESTED</id>
+    <persistency>volatile</persistency>
+    <simpleType>
+      <uint64_t>
+        <default>0x0</default>
+      </uint64_t>
+    </simpleType>
+    <readable/>
+    <writeable/>
+  </attribute>
+
+  <attribute>
     <id>SOCKET_POWER_NOMINAL</id>
     <description>
       The socket power in nominal mode.
diff --git a/src/usr/targeting/common/xmltohb/simics_CUMULUS.system.xml b/src/usr/targeting/common/xmltohb/simics_CUMULUS.system.xml
index 17aee23..5218811 100644
--- a/src/usr/targeting/common/xmltohb/simics_CUMULUS.system.xml
+++ b/src/usr/targeting/common/xmltohb/simics_CUMULUS.system.xml
@@ -5,7 +5,7 @@
 <!--                                                                        -->
 <!-- OpenPOWER HostBoot Project                                             -->
 <!--                                                                        -->
-<!-- Contributors Listed Below - COPYRIGHT 2016,2019                        -->
+<!-- Contributors Listed Below - COPYRIGHT 2016,2020                        -->
 <!-- [+] International Business Machines Corp.                              -->
 <!--                                                                        -->
 <!--                                                                        -->
@@ -110,19 +110,15 @@
 <targetInstance>
     <id>sys0</id>
     <type>sys-sys-power9</type>
-
-
-
-
-
+    <attribute>
+        <id>SMF_MEM_AMT_REQUESTED</id>
+        <!-- SMF is not enabled in P9 standalone; don't request any SMF mem-->
+        <default>0x0</default>
+    </attribute>
     <attribute>
         <id>AFFINITY_PATH</id>
         <default>affinity:sys-0</default>
     </attribute>
-
-
-
-
     <attribute>
         <id>ASYNC_NEST_FREQ_MHZ</id>
         <default>0xFFFF</default>
diff --git a/src/usr/targeting/common/xmltohb/simics_NIMBUS.system.xml b/src/usr/targeting/common/xmltohb/simics_NIMBUS.system.xml
index 94036d4..8c75e4f 100644
--- a/src/usr/targeting/common/xmltohb/simics_NIMBUS.system.xml
+++ b/src/usr/targeting/common/xmltohb/simics_NIMBUS.system.xml
@@ -5,7 +5,7 @@
 <!--                                                                        -->
 <!-- OpenPOWER HostBoot Project                                             -->
 <!--                                                                        -->
-<!-- Contributors Listed Below - COPYRIGHT 2012,2019                        -->
+<!-- Contributors Listed Below - COPYRIGHT 2012,2020                        -->
 <!-- [+] International Business Machines Corp.                              -->
 <!--                                                                        -->
 <!--                                                                        -->
@@ -57,6 +57,11 @@
     <id>sys0</id>
     <type>sys-sys-power9</type>
     <attribute>
+        <id>SMF_MEM_AMT_REQUESTED</id>
+        <!-- SMF is not enabled in P9 standalone; don't request any SMF mem-->
+        <default>0x0</default>
+    </attribute>
+    <attribute>
         <id>MODEL</id>
         <default>POWER9</default>
     </attribute>
diff --git a/src/usr/targeting/common/xmltohb/target_types.xml b/src/usr/targeting/common/xmltohb/target_types.xml
index a7dfe32..768792e 100644
--- a/src/usr/targeting/common/xmltohb/target_types.xml
+++ b/src/usr/targeting/common/xmltohb/target_types.xml
@@ -2221,6 +2221,9 @@
       <id>SBE_UPDATE_DISABLE</id>
     </attribute>
     <attribute>
+      <id>SMF_MEM_AMT_REQUESTED</id>
+    </attribute>
+    <attribute>
       <id>SOCKET_POWER_NOMINAL</id>
     </attribute>
     <attribute>
-- 
1.8.2.2

